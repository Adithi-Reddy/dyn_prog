import java.util.Arrays;

/**
 * Given an undirected graph G having N (1<N<=1000) vertices and positive weights. 
 * Find the shortest path from vertex 1 to vertex N, or state that such path doesn’t exist.

	Hint: At each step, among the vertices which weren’t yet checked and for which a path from vertex 1 was found, 
	take the one which has the shortest path, from vertex 1 to it, yet found.
 * 
 * 	sample input:
	Number of vertices = 4
	Number of edges = 6
	Enter 6 weights with edges:
	1 2 80
	1 3 69
	2 3 140
	2 4 20
	3 4 90
	4 1 150
	Edge for shortest distance = 4

Sample output:
100
 * @author kayethi
 *
 */
public class shortestPathWeightedGraph {
	public static void main(String[] args){
		shortestPathWeightedGraph s = new shortestPathWeightedGraph();
		int[][] graph= new int[4][4];
		for (int[] row: graph){
		    Arrays.fill(row, -1);}

		//Arrays.fill(graph, new int[]{-1,-1,-1,-1});
		graph[0][1] =80;
		graph[0][2] =69;
		graph[1][2] =140;
		graph[1][3] =20;
		graph[2][3] =90;
		graph[3][0] =150;
		
		System.out.println(s.findShortestPath(graph));
	}

	private Long findShortestPath(int[][] values) {
		//shortest path from vertex 1 to N
		int N = values.length;
		Long[] sp = new Long[N];
		Arrays.fill(sp,2147483647L );
		sp[0]=0L;
		for (int i = 0; i < sp.length; i++) {
			System.out.println(values[i]);
		}
		for (int i = 1; i < N; i++) {
			for (int j = 0; j < i; j++) {
				if(values[i][j]>0 ){
					if(sp[i]>sp[j]+values[i][j])
						sp[i]=sp[j]+values[i][j];
				}else if(values[j][i]>0&&(sp[i]>sp[j]+values[j][i]))
								sp[i]=sp[j]+values[j][i];
				
			}
		}
		for (int i = 0; i < sp.length; i++) {
			System.out.println(sp[i]);
		}
		return sp[N-1];
	}
}
