import java.lang.reflect.Array;
import java.util.Arrays;

/**
 * Given a string, find the rank of the string amongst its permutations sorted lexicographically. 
Assume that no characters are repeated.

Example :

Input : 'acb'
Output : 2

The order permutations with letters 'a', 'c', and 'b' : 
abc
acb
bac
bca
cab
cba
The answer might not fit in an integer, so return your answer % 1000003
 * @author kayethi
 *
 */
public class RANK {
	public int findRank(String a) {
		int rank=0;
		char[] b= a.toCharArray();
		char[] c= a.toCharArray();		
		int n=c.length;
		int[] num = new int[n];
		Arrays.sort(c);
		
		for (int i = 0; i < n; i++) {
			int l=0;
			while(c[l++]!=b[i]){ 
				continue;}
			num[i]=l;
			//System.out.println("["+b[i]+"]" +(l));
			//rank+=(l-i-1)*factorial(l-i)% 1000003;
		}
		for (int i = 0; i < n; i++) {
			int j=i;int lessCount=0;
			while(j<n){
				if(num[j]<num[i]){
					lessCount++;
				}

				j++;
			}
			rank+=((lessCount)% 1000003*(factorial(n-1-i)% 1000003))% 1000003;
		}
		
		return (rank+1)% 1000003;
	}
	private int factorial(int c) {
		return c<=1? 1:((c% 1000003*factorial(c-1)% 1000003)% 1000003);
	}
	public static void main(String[] args) {
		RANK b = new RANK();
		System.out.println(b.findRank("qazwsxedcrfvtgbyhnujmiklop"));
	}
}
