import java.util.Arrays;

/**
 * A robot is located at the top-left corner of an A x B grid (marked ‘Start’ in the diagram below).



The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).

How many possible unique paths are there?

Note: A and B will be such that the resulting answer fits in a 32 bit signed integer.

Example :

Input : A = 2, B = 2
Output : 2

2 possible routes : (0, 0) -> (0, 1) -> (1, 1) 
              OR  : (0, 0) -> (1, 0) -> (1, 1)
 * @author kayethi
 *
 */
public class IB_PATHS {
	public int uniquePaths(int a, int b) {
		int[][] grid = new int[a][b];
		for (int i = 0; i < a; i++) {
			Arrays.fill(grid[i], 0);
		}
		if(a<2 || b<2) return 1;
		grid[0][0]=1;
		for (int sum = 1; sum < a+b-1; sum++) {
			//System.out.println(sum);
			for (int i = 0,j=sum-i; i < a && j>0; i++) {
				if((sum-i)>=b) continue;
				j=sum-i;
				//System.out.println(i+" , "+j);
				if(i>0&&j>0){
					grid[i][j] =grid[i-1][j]+grid[i][j-1];
				}else if(i>0){

					grid[i][j] =grid[i-1][j];
				}else if(j>0){

					grid[i][j] =grid[i][j-1];
				}
				
			}
		}
		return grid[a-1][b-1];
	}
	public static void main(String[] args) {
		IB_PATHS b = new IB_PATHS();
		System.out.println(b.uniquePaths(15, 9));
	}
}
