import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;


public class BFSGraph {
		private int V; //No. of vertices
		private LinkedList<Integer> adj[];
		
		BFSGraph(int v){
			V=v;
			adj = new LinkedList[v];
			Arrays.fill(adj,new LinkedList());
		}
		public void bfs(int s){ //s is the source
			boolean visited[] = new boolean[V];
			LinkedList<Integer> queue = new LinkedList<Integer>(); 
			visited[s]=true;
			queue.add(s);
			while (!queue.isEmpty()) {
				s=queue.poll();
				System.out.print(s +" ");
				Iterator<Integer> i = adj[s].listIterator();
				while(i.hasNext()){
					int n = i.next();
					if(!visited[n]){
						visited[n]=true;
						queue.add(n);
					}
				}
			}
			
		}
		 // Driver method to
	    public static void main(String args[])
	    {
	        BFSGraph g = new BFSGraph(4);
	 
	        g.addEdge(0, 1);
	        g.addEdge(0, 2);
	        g.addEdge(1, 2);
	        g.addEdge(2, 0);
	        g.addEdge(2, 3);
	        g.addEdge(3, 3);
	        g.bfs(3);
	        g.bfsA(3);
	    }
		private void addEdge(int i, int j) {
			adj[i].add(j);
			
		}
		
		public void bfsA(int s){
			boolean[] visited = new boolean[V];
			LinkedList<Integer> q = new LinkedList<Integer>();
			q.add(s);
			visited[s]=true;
			while(!q.isEmpty()){
				int temp = q.poll();
				System.out.print(temp+ " ");
				Iterator<Integer> i = adj[s].iterator();
				while(i.hasNext()){
					int tem = i.next();
					if(!visited[tem]){
						q.add(tem);
						visited[tem]=true;
					}
				}
			}
		}
	}


